package main

import (
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

var template = `
// Code generated by type.sh. DO NOT EDIT.
// source: %s

package source

var BaseType = %s
`

func main() {
	// fmt.Println()
	files, err := FilePathWalkDir("../source")
	if err != nil {
		panic(err)
	}
	source := make(map[string]interface{})
	var sourceFile []string
	for _, filePath := range files {
		if splitArr := strings.Split(filePath, "."); splitArr[len(splitArr)-1] == "json" {
			sourceFile = append(sourceFile, filePath)
			c, _ := os.ReadFile(filePath)
			local := make(map[string]interface{})
			_ = json.Unmarshal(c, &local)
			for key, value := range local {
				source[key] = value
			}
		}
	}
	bSource, _ := json.Marshal(source)
	sourceType := fmt.Sprintf(template, strings.Join(sourceFile, " "), fmt.Sprintf("`%s`", bSource))
	writeToFile("../source/base.go", sourceType)
}

func FilePathWalkDir(root string) ([]string, error) {
	var files []string
	err := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
		if !info.IsDir() {
			files = append(files, path)
		}
		return nil
	})
	return files, err
}

func writeToFile(target, content string) {
	err := os.WriteFile(target, []byte(content), 0644)
	if err != nil {
		panic(err)
	}
}
